@model IEnumerable<Bourse.Models.DTO.IndiceDTO>

@{
    ViewData["Title"] = "Forecasts";
}

<h1>Forecasts of stock titles</h1>
<table>
    <tr>
        <td>
            <div class="bloc">
                <form asp-action="ForecastsDTO" method="get">
                    <div class="form-actions no-color">
                        <p>
                            Filter by Bourse:
                            <select name="exchangeFiltre">
                                <option value="">All Exchanges</option>
                                @foreach (var exchange in ViewBag.Exchanges)
                                {
                                    // Calculer si l'option doit être sélectionnée
                                    var select = (ViewData["ExchangeFiltre"]?.ToString() == exchange.Key) ? true : false;

                                    <option value="@exchange.Key" selected="@select">
                                        @exchange.Value
                                    </option>
                                }
                            </select>
                            <input type="submit" value="Filter" class="btn btn-primary" />
                        </p>
                    </div>
                </form>
            </div>
        </td>
        <td>
            <div class="bloc">
                <form asp-action="ForecastsDTO" method="get">
                    <div class="form-actions no-color">
                        <p>
                            Search for a stock title: <input type="text" name="filtre" value="@ViewData["actifFiltre"]" />
                            <input type="submit" value="Recherche" class="btn btn-primary" />
                        </p>
                    </div>
                </form>
            </div>
        </td>
        <td>
            <div class="bloc">
                <div class="form-actions no-color">
                    <p>
                        Historical date: @ViewBag.DateReset
                        <a asp-action="ForecastsDTO" asp-route-resethistorique="true" class="btn btn-primary">Reset historique</a>
                    </p>
                </div>
            </div>
        </td>
    </tr>
</table>

@if (ViewData["TotalPages"] != null)
{
    var currentPage = (int)ViewData["CurrentPage"];
    var totalPages = (int)ViewData["TotalPages"];
    var pageSize = (int)ViewData["PageSize"];
    string sortOrder = ViewData["CurrentSort"]?.ToString();
    string filtre = ViewData["actifFiltre"]?.ToString();
    string exchangeFiltre = ViewData["ExchangeFiltre"]?.ToString();

    <nav aria-label="Page navigation example">
        <ul class="pagination">
            @if (currentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("ForecastsDTO", new { page = currentPage - 1, pageSize = pageSize, sortOrder = sortOrder, filtre = filtre, exchangeFiltre = exchangeFiltre })">Previous</a>
                </li>
            }

            @for (int i = Math.Max(1, currentPage - 4); i <= Math.Min(totalPages, currentPage + 4); i++)
            {
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <a class="page-link" href="@Url.Action("ForecastsDTO", new { page = i, pageSize = pageSize, sortOrder = sortOrder, filtre = filtre, exchangeFiltre = exchangeFiltre })">@i</a>
                </li>
            }

            @if (currentPage < totalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("ForecastsDTO", new { page = currentPage + 1, pageSize = pageSize, sortOrder = sortOrder, filtre = filtre, exchangeFiltre = exchangeFiltre })">Next</a>
                </li>
            }
        </ul>
    </nav>
}

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.ActionLink(Html.DisplayNameFor(model => model.Symbol), "ForecastsDTO", new { sortOrder = ViewBag.SymbolSortParm }, new { @class = "no-underline" })
                @Html.Raw(RenderSortArrow(ViewBag.CurrentSort, "symbol_asc", "symbol_desc"))
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RegularMarketPreviousClose)
            </th>
            <th>
                @Html.ActionLink(Html.DisplayNameFor(model => model.RegularMarketPrice), "ForecastsDTO", new { sortOrder = ViewBag.PriceSortParm }, new { @class = "no-underline" })
                @Html.Raw(RenderSortArrow(ViewBag.CurrentSort, "price_asc", "price_desc"))
            </th>
            <th>
                @Html.ActionLink(Html.DisplayNameFor(model => model.RegularMarketChange), "ForecastsDTO", new { sortOrder = ViewBag.ChangeSortParm }, new { @class = "no-underline" })
                @Html.Raw(RenderSortArrow(ViewBag.CurrentSort, "change_asc", "change_desc"))
            </th>
            <th>
                @Html.DisplayNameFor(model => model.QuoteType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RegularMarketVolume)
            </th>
            <th style="width:100px">
                @Html.ActionLink(Html.DisplayNameFor(model => model.DatesExercicesFinancieres), "ForecastsDTO", new { sortOrder = ViewBag.DatesExercFinancParm }, new { @class = "no-underline" })
                @Html.Raw(RenderSortArrow(ViewBag.CurrentSort, "exercfinanc_asc", "exercfinanc_desc"))
            </th>
            <th>
                @Html.ActionLink(Html.DisplayNameFor(model => model.Bourse), "ForecastsDTO", new { sortOrder = ViewBag.BourseParm }, new { @class = "no-underline" })
                @Html.Raw(RenderSortArrow(ViewBag.CurrentSort, "bourse_asc", "bourse_desc"))
            </th>
            <th>
                @Html.ActionLink(Html.DisplayNameFor(model => model.Label), "ForecastsDTO", new { sortOrder = ViewBag.LabelSortParm }, new { @class = "no-underline" })
                @Html.Raw(RenderSortArrow(ViewBag.CurrentSort, "label_asc", "label_desc"))
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Raccomandation)
            </th>
            <th style="width:100px">
                @Html.DisplayNameFor(model => model.DateUpdated)
            </th>
            <th>
                @Html.ActionLink(Html.DisplayNameFor(model => model.Probability), "ForecastsDTO", new { sortOrder = ViewBag.ProbSortParm }, new { @class = "no-underline" })
                @Html.Raw(RenderSortArrow(ViewBag.CurrentSort, "prob_asc", "prob_desc"))
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Symbol)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RegularMarketPreviousClose)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RegularMarketPrice)
                </td>
                <td class="@(item.RegularMarketChange <= 0 ? "color-negative" :"color-positive")">
                    @Html.DisplayFor(modelItem => item.RegularMarketChange)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.QuoteType)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RegularMarketVolume)
                </td>
                <td class="nobreak-date">
                    @foreach (var date in FormattedDate(item.DatesExercicesFinancieres))
                    {
                        <span>@date</span>

                        <br />
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Bourse)
                </td>
                <td class="@(item.Label ? "color-positive" : "color-negative")">
                    @(item.Label ? "UP" : "DOWN")
                </td>
                <td style="color:@GetRaccomandationColor(item.Raccomandation); font-weight: bold">
                    @Html.DisplayFor(modelItem => item.Raccomandation)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateUpdated)
                </td>
                <td class="@(item.Probability > 0.49 ? "color-positive" : "color-negative")">
                    @DisplayProbability(item.Probability)
                </td>
                <td>
                    <a asp-action="DetailsDTO" asp-route-item="@item.Symbol" asp-route-returnUrl="ForecastsDTO">Details</a>

                    @* @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) | *@
                    @* @Html.ActionLink("Details", "DetailsDTO", new { item = item.Symbol }) *@
                    @* @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ }) *@
                </td>
            </tr>
        }
    </tbody>
</table>

<style>
    .color-positive {
        color: green;
        font-weight: bold;
    }

    .color-negative {
        color: lightcoral;
        font-weight: bold;
    }

    a.no-underline {
        text-decoration: none; /* Supprime le soulignement */
        color: inherit; /* Prend la couleur du texte environnant */
    }

    .fleches {
        color: darkblue;
    }

    .bloc {
        display: flex;
        justify-content: space-between; /* Répartir l'espace entre les divs */
        align-items: flex-start; /* Aligner les divs en haut */
        padding: 10px;
    }

    .nobreak-date {
        white-space: nowrap; /* Empêche le retour à la ligne dans une date */
    }
</style>

@functions {
    string RenderSortArrow(string currentSort, string columnSortAsc, string columnSortDesc)
    {
        if (currentSort == columnSortAsc) return "&#x25BC;"; // Descending arrow
        if (currentSort == columnSortDesc) return "&#x25B2;"; // Ascending arrow
        return string.Empty;
    }
}

@functions {
    string DisplayProbability(double? probability)
    {
        return probability.HasValue && probability > 0
            ? $"{(int)(probability.Value * 100)} %"
            : "N/A";
    }
}

@functions {
    public string GetRaccomandationColor(string raccomandation)
    {
        return raccomandation switch
        {
            "Strong Buy" => "green",
            "Buy" => "lightgreen",
            "Hold" => "lightblue",
            "Sell" => "orange",
            "Strong Sell" => "red",
            _ => "black" // Par défaut
        };
    }
}

@functions {
    public List<string> FormattedDate(DateTime[]? Dates)
    {
        var DatesExercicFinanc = new List<string>();

        if (Dates == null || Dates.Length == 0)
        {
            return new List<string> { "N/A" };
        }

        foreach (var date in Dates.OrderBy(d => d.Date))
        {

            DatesExercicFinanc.Add(date == DateTime.MinValue
                ? "N/A"
                : date.ToString("dd/MM/yyyy"));
        }

        return DatesExercicFinanc;
    }
}
