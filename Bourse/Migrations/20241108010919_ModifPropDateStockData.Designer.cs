// <auto-generated />
using System;
using Bourse.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bourse.Migrations
{
    [DbContext(typeof(BourseContext))]
    [Migration("20241108010919_ModifPropDateStockData")]
    partial class ModifPropDateStockData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Bourse.Models.Indice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DatePrevision")
                        .HasColumnType("TEXT");

                    b.Property<string>("Exchange")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExchangeTimezoneName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsIncreasing")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Probability")
                        .HasColumnType("REAL");

                    b.Property<string>("QuoteType")
                        .HasColumnType("TEXT");

                    b.Property<double?>("RegularMarketChange")
                        .HasColumnType("REAL");

                    b.Property<double?>("RegularMarketChangePercent")
                        .HasColumnType("REAL");

                    b.Property<double?>("RegularMarketOpen")
                        .HasColumnType("REAL");

                    b.Property<double?>("RegularMarketPreviousClose")
                        .HasColumnType("REAL");

                    b.Property<double?>("RegularMarketPrice")
                        .HasColumnType("REAL");

                    b.Property<long?>("RegularMarketVolume")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Indices");
                });

            modelBuilder.Entity("Bourse.Models.RealPrice", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IndiceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Exchange")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExchangeTimezoneName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExchangeTimezoneShortName")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuoteType")
                        .HasColumnType("TEXT");

                    b.Property<double?>("RegularMarketChange")
                        .HasColumnType("REAL");

                    b.Property<double?>("RegularMarketChangePercent")
                        .HasColumnType("REAL");

                    b.Property<double?>("RegularMarketDayHigh")
                        .HasColumnType("REAL");

                    b.Property<double?>("RegularMarketDayLow")
                        .HasColumnType("REAL");

                    b.Property<double?>("RegularMarketOpen")
                        .HasColumnType("REAL");

                    b.Property<double?>("RegularMarketPreviousClose")
                        .HasColumnType("REAL");

                    b.Property<double?>("RegularMarketPrice")
                        .HasColumnType("REAL");

                    b.Property<long?>("RegularMarketVolume")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id", "IndiceId");

                    b.HasIndex("IndiceId");

                    b.ToTable("RealPrices");
                });

            modelBuilder.Entity("Bourse.Models.StockData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("CurrentPrice")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<float>("High")
                        .HasColumnType("REAL");

                    b.Property<int>("IndiceId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsIncreasing")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Low")
                        .HasColumnType("REAL");

                    b.Property<float>("Open")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("IndiceId");

                    b.ToTable("StockData", (string)null);
                });

            modelBuilder.Entity("Bourse.Models.RealPrice", b =>
                {
                    b.HasOne("Bourse.Models.Indice", null)
                        .WithMany("RealPrices")
                        .HasForeignKey("IndiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bourse.Models.StockData", b =>
                {
                    b.HasOne("Bourse.Models.Indice", null)
                        .WithMany("TrainingData")
                        .HasForeignKey("IndiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bourse.Models.Indice", b =>
                {
                    b.Navigation("RealPrices");

                    b.Navigation("TrainingData");
                });
#pragma warning restore 612, 618
        }
    }
}
